// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by dev-tools/cmd/buildlimits/buildlimits.go - DO NOT EDIT.

package config

import (
	"math"
	"runtime"
	"strings"
	"time"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
	"github.com/elastic/go-ucfg/yaml"
	"github.com/pkg/errors"
)

const (
	defaultCacheNumCounters = 500000           // 10x times expected count
	defaultCacheMaxCost     = 50 * 1024 * 1024 // 50MiB cache size

	defaultMaxConnections = 0 // no limit
	defaultPolicyThrottle = time.Millisecond * 5

	defaultCheckinInterval = time.Millisecond
	defaultCheckinBurst    = 1000
	defaultCheckinMax      = 0
	defaultCheckinMaxBody  = 1024 * 1024

	defaultArtifactInterval = time.Millisecond * 5
	defaultArtifactBurst    = 25
	defaultArtifactMax      = 50
	defaultArtifactMaxBody  = 0

	defaultEnrollInterval = time.Millisecond * 10
	defaultEnrollBurst    = 100
	defaultEnrollMax      = 50
	defaultEnrollMaxBody  = 1024 * 512

	defaultAckInterval = time.Millisecond * 10
	defaultAckBurst    = 100
	defaultAckMax      = 50
	defaultAckMaxBody  = 1024 * 1024 * 2
)

type valueRange struct {
	Min int `config:"min"`
	Max int `config:"max"`
}

type envLimits struct {
	Agents valueRange           `config:"num_agents"`
	Server *serverLimitDefaults `config:"server_limits"`
	Cache  *cacheLimits         `config:"cache_limits"`
}

func defaultEnvLimits() *envLimits {
	return &envLimits{
		Agents: valueRange{
			Min: 0,
			Max: int(getMaxInt()),
		},
		Server: defaultserverLimitDefaults(),
		Cache:  defaultCacheLimits(),
	}
}

type cacheLimits struct {
	NumCounters int64 `config:"num_counters"`
	MaxCost     int64 `config:"max_cost"`
}

func defaultCacheLimits() *cacheLimits {
	return &cacheLimits{
		NumCounters: defaultCacheNumCounters,
		MaxCost:     defaultCacheMaxCost,
	}
}

type limit struct {
	Interval time.Duration `config:"interval"`
	Burst    int           `config:"burst"`
	Max      int64         `config:"max"`
	MaxBody  int64         `config:"max_body_byte_size"`
}

type serverLimitDefaults struct {
	PolicyThrottle time.Duration `config:"policy_throttle"`
	MaxConnections int           `config:"max_connections"`

	CheckinLimit  limit `config:"checkin_limit"`
	ArtifactLimit limit `config:"artifact_limit"`
	EnrollLimit   limit `config:"enroll_limit"`
	AckLimit      limit `config:"ack_limit"`
}

func defaultserverLimitDefaults() *serverLimitDefaults {
	return &serverLimitDefaults{
		PolicyThrottle: defaultCacheNumCounters,
		MaxConnections: defaultCacheMaxCost,

		CheckinLimit: limit{
			Interval: defaultCheckinInterval,
			Burst:    defaultCheckinBurst,
			Max:      defaultCheckinMax,
			MaxBody:  defaultCheckinMaxBody,
		},
		ArtifactLimit: limit{
			Interval: defaultArtifactInterval,
			Burst:    defaultArtifactBurst,
			Max:      defaultArtifactMax,
			MaxBody:  defaultArtifactMaxBody,
		},
		EnrollLimit: limit{
			Interval: defaultEnrollInterval,
			Burst:    defaultEnrollBurst,
			Max:      defaultEnrollMax,
			MaxBody:  defaultEnrollMaxBody,
		},
		AckLimit: limit{
			Interval: defaultAckInterval,
			Burst:    defaultAckBurst,
			Max:      defaultAckMax,
			MaxBody:  defaultAckMaxBody,
		},
	}
}

var defaults []*envLimits

func init() {
	// Packed Files
	// internal/pkg/config/defaults/gte10000_limits.yml
	// internal/pkg/config/defaults/gte12500_limits.yml
	// internal/pkg/config/defaults/gte5000_limits.yml
	// internal/pkg/config/defaults/gte50_limits.yml
	// internal/pkg/config/defaults/gte7500_limits.yml
	// internal/pkg/config/defaults/lt50_limits.yml
	// internal/pkg/config/defaults/max_limits.yml
	unpacked := packer.MustUnpack("eJzsl0uPqkgUx/fzMVxPpilsnDhJL7BRxJsqoxEK2EwoUIRbPNKiPCbz3SfFw7EFrzC5SW9mScB/nTrnd/7n+NfIC5P9R2jRl/i7+2JH4cFzX5z9wTrT5PTiJnvAcRz3J/UCLzn9lgd09MeIhFqi84vQxAJnF9E35X2WWPh1okjzFEpi+u6JLsGL17UnZtBXUyjGvoFRZGrTk4VB7CzhpPym1EEXBwucqa8K9j3yRaZRahr68WDw08KRIhf6ooCKOYC+mL6HiNqhSW36Wc+W2TMS9PE2soMp58gZXXsiIDq81TuTQPMdmV5ICCeKBPMmZoM/UoNPYtLoSuxuoqvI9OzIWu4EixPTg9IM2GnksndGqOX2eDNRpE0dN/seHPcs5p0CoDRnZx/tcBubwcJ3Fldtl52pvM9iEm7ZfY5Eily0E1OnjJfprIAdIm7tiVwTY3UPd6JIbpMnSsLVhcjZgcg0sfTNRBGr2Kwqr7yB07I2pK2btWL261xg9KHzWUww5dZul56awqVW1DF5jr4q64QkMYX1+TUDryz20a/PSeOFAaTlLFM3pBWwPPlLScu/jjQ1/Z+03qQJAyxNvYGEJcMG7NngF74la3UitkUZuCwAok19MtbKItpFHWQHZGh3heybzbOCa3mThPr8lPBZbIzpwZGPORlvOSKrN8l9BNm/FtwTsvxBse4gsAdbGQxAq2hw1yratSlMLOSEz05XGDyxK94Myt26n+NVqnPkhW+Bn3F/heX1rRdc/dG68S9QHhmgIyvbHQpnBwNWalClFzbhXH/PvK3yBiVd7+wM7ZTBU7JJa6NHAoEa421MeIH55Xiod3WkFdx7APMguCnLlDsyDQyMuCfl76V7xUzWznYwPZFnqPqzpO2z6h0C875Icf1jfOuD1O8DBqMNPvtV7Qe9wXIfgDVPkeQCVBhsyBbMnE199dn/lrMLkam/16actVxdnOX2ZO4iF+EfgpXDxshlFJkYfVhYuA6YzmLhjv73W75S9vBAuLKOwuVtL9h88UBcdMCqtJaCakA+B4wmfSyrurk61KIer1fuMIpYdp5OvgEUoV1XyyvgQcv3JghKXbrzlpUMmnidmuq9nZTT2eCTH3dP971b0+4ZNYGV9bUkONCC4I0lgON+wVaqphW/j+FOZe8Hrk1adelGjxfOJkachadntqbB4gorW+t8i6fnn7ST5v9lxvXd+9fSwDnXWfx510rWC6aB/yHeRn//8k8AAAD//8exhc0=")

	for f, v := range unpacked {
		cfg, err := yaml.NewConfig(v, DefaultOptions...)
		if err != nil {
			panic(errors.Wrap(err, "Cannot read spec from "+f))
		}

		l := defaultEnvLimits()
		if err := cfg.Unpack(&l, DefaultOptions...); err != nil {
			panic(errors.Wrap(err, "Cannot unpack spec from "+f))
		}

		defaults = append(defaults, l)
	}
}

func initLimits() *envLimits {
	return loadLimits(0)
}

func loadLimits(agentLimit int) *envLimits {
	return loadLimitsForAgents(agentLimit)
}

func loadLimitsForAgents(agentLimit int) *envLimits {
	for _, l := range defaults {
		// get nearest limits for configured agent numbers
		if l.Agents.Min < agentLimit && agentLimit <= l.Agents.Max {
			return l
		}
	}

	return defaultEnvLimits()
}

func getMaxInt() int64 {
	if strings.HasSuffix(runtime.GOARCH, "64") {
		return math.MaxInt64
	}
	return math.MaxInt32
}
